{"version":3,"file":"static/js/493.4eb263e8.chunk.js","mappings":"iKACA,QAA0B,yBAA1B,EAA4D,wBAA5D,EAAmG,8BAAnG,EAA6K,0BAA7K,EAA+M,uB,iCCS/M,MAUA,EAVqCA,IACjC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAMC,IAAI,MACpBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIX,EAAKK,SAAEN,EAAMa,SACxB,ECCd,EATiCb,IAEzBG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAASC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAOC,IAAI,MACrBH,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,SAAEN,EAAMc,a,iCCE/C,MA0CMC,GAAsBC,EAAAA,EAAAA,GAA8B,CAAEC,KAAM,wBAAtCD,EAZuChB,IAE3DG,EAAAA,EAAAA,MAAA,QAAMe,SAAUlB,EAAMmB,aAAab,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAAD,UACKc,EAAAA,EAAAA,IAAsC,qBAAsB,iBAAkB,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,MAAOC,EAAAA,OAEtHhB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAOxB,EA5CgCN,IAE5B,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAIC,IAAKtB,EAAAA,EAAAA,KAACuB,EAAY,CAACjB,KAAMgB,EAAEhB,KAAiBX,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,MAC5E6B,EAAmBP,EAAMQ,SAASJ,KAAIK,IAAK1B,EAAAA,EAAAA,KAAC2B,EAAQ,CAACpB,QAASmB,EAAEnB,QAAoBZ,GAAI+B,EAAE/B,IAAZ+B,EAAE/B,MAKpF,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAeC,SAC1BoB,KAELnB,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,UACvBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMyB,OAEVxB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACQ,EAAmB,CAACG,SAZZiB,IACjBnC,EAAMoC,YAAYD,EAAOE,eAAe,QAalC,E,kCCbd,SAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdmBf,IACZ,CACHC,YAAaD,EAAMC,eAYE,CAAEe,mBATLC,IACf,CACHL,YAAcC,IACVI,EAASC,EAAAA,EAAQN,YAAYC,GAAgB,MAOrDM,EAAAA,EAFJ,CAGEC,E,2ECpBF,SAASC,EAA2BrB,GAChC,MAAO,CACHsB,OAAQtB,EAAMuB,KAAKD,OAE3B,CAKO,SAASH,EAAkDK,GAU9D,OAFqCT,EAAAA,EAAAA,IAA6CM,EAA4B,CAAC,EAA1EN,EAPavC,IAC9C,IAAI,OAAE8C,KAAWG,GAAcjD,EAC/B,OAAK8C,GAGEvC,EAAAA,EAAAA,KAACyC,EAAgB,IAAKC,KAHT1C,EAAAA,EAAAA,KAAC2C,EAAAA,GAAM,CAAA5C,UACvBC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAK,CAAClD,KAAK,IAAImD,SAAS7C,EAAAA,EAAAA,KAAC8C,EAAAA,GAAQ,CAACzC,GAAG,cAEkB,GAKpE,C","sources":["webpack://first-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItems/DialogItems.tsx","components/Dialogs/DialogsItems/Messeges/Messeges.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZyLQd\",\"dialog\":\"Dialogs_dialog__YtWJA\",\"dialogsItems\":\"Dialogs_dialogsItems__QkU4L\",\"active\":\"Dialogs_active__EbVUZ\",\"masseges\":\"Dialogs_masseges__DUhjn\",\"names\":\"Dialogs_names__b7xg+\"};","import React, { FC } from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport icon from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogsItems: FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.names}>\r\n            <img src={icon} alt=\"\" />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItems","import React, { FC } from \"react\";\r\nimport icon from \"../../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport s from \"../../Dialogs.module.css\"\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\nconst Masseges: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={icon}  alt=\"\" />\r\n            <div className={s.masseges}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Masseges","import React, { FC } from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogsItems from \"./DialogsItems/DialogItems\"\r\nimport Masseges from \"./DialogsItems/Messeges/Messeges\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Textarea, createField } from \"../../FormsControl/FormsControl\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { InitialStateType } from \"../../redux/dialogsReducer\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItems name={d.name} key={d.id} id={d.id} />)\r\n    let massagesElements = state.messages.map(m => <Masseges message={m.message} key={m.id} id={m.id} />)\r\n\r\n    let addNewMessage = (values: NewMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.masseges}>\r\n                <div>{massagesElements}</div>\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype NewMessageValuesKeysType = keyof NewMessageFormType\r\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLengthCreator(100)], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormType>({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs","import { actions } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (arg0: any) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: any) => {\r\n            dispatch(actions.sendMessage(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, { mapDispatchToProps }),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nfunction mapStateToPropsforRedirect(state: AppStateType) {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype IntrinsicAttributes = {}\r\nexport function withAuthRedirect<WCP extends IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: FC<MapPropsType & {}> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n        if (!isAuth) return <Routes>\r\n            <Route path=\"*\" element={<Navigate to=\"/login\" />} />\r\n        </Routes>\r\n        return <WrappedComponent {...restProps as unknown as WCP} />\r\n    }\r\n    let connectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsforRedirect, {})(RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent\r\n}"],"names":["props","path","id","_jsxs","className","s","children","_jsx","src","icon","alt","NavLink","to","name","message","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","maxLengthCreator","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","DialogsItems","massagesElements","messages","m","Masseges","values","sendMessage","newMessageBody","compose","connect","mapDispatchToProps","dispatch","actions","withAuthRedirect","Dialogs","mapStateToPropsforRedirect","isAuth","auth","WrappedComponent","restProps","Routes","Route","element","Navigate"],"sourceRoot":""}