{"version":3,"file":"static/js/672.33ab3ffd.chunk.js","mappings":"wJACA,SAAgB,IAAM,yBAAyB,aAAe,kCAAkC,SAAW,+B,uBCI3G,MAmCA,EAnCwCA,IAEpC,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAQC,IAAaF,EAAAA,EAAAA,UAASH,EAAMI,SAEzCE,EAAAA,EAAAA,YAAU,KACND,EAAUL,EAAMI,OAAO,GACxB,CAACJ,EAAMI,SAYV,OACIG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACMP,IACEM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,WAAU,MAAEC,EAAAA,EAAAA,KAAA,QAAMC,cAdZC,KACrBT,GAAY,EAAK,EAagDM,SAAGR,EAAMI,QAAU,SAG/EH,IACGQ,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,SAAOG,SAZCC,IACpBR,EAAUQ,EAAEC,cAAcC,MAAM,EAWaC,WAAW,EAAMC,OAhBvCC,KACvBhB,GAAY,GACZF,EAAMmB,aAAaf,EAAO,EAcgEW,MAAOX,QAG3F,E,2CCzBd,MA+BA,GAFiCgB,EAAAA,EAAAA,GAAkC,CAAEC,KAAM,gBAA1CD,EA7BkDE,IAAuC,IAAtC,aAAEC,EAAY,QAAEC,EAAO,MAAEC,GAAOH,EAChH,OAAOf,EAAAA,EAAAA,MAAA,QAAMmB,SAAUH,EAAaf,SAAA,CAC/BiB,IAAShB,EAAAA,EAAAA,KAAA,OAAKkB,UAAWC,EAAAA,EAAMC,iBAAiBrB,SAAEiB,KACnDhB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAEZD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAAa,MAAGsB,EAAAA,EAAAA,IAA6B,YAAa,WAAY,GAAIC,EAAAA,QAEjFxB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBAAqB,MAAGsB,EAAAA,EAAAA,IAA6B,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAAEC,KAAM,iBAErGzB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAAe,MAAGsB,EAAAA,EAAAA,IAA6B,cAAe,4BAA6B,GAAIG,EAAAA,QAEtG1B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,MAAGsB,EAAAA,EAAAA,IAA6B,WAAY,UAAW,GAAIG,EAAAA,QAE9E1B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,KAAG0B,OAAOC,KAAKX,EAAQY,UAAUC,KAAIC,IACzC/B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAI8B,IAAQ,MAAGR,EAAAA,EAAAA,IAAYQ,EAAK,WAAaA,EAAK,GAAIP,EAAAA,MADzCO,UAMrB,ICkBNC,EAAwCC,IAAuC,IAAtC,QAAEhB,EAAO,QAAEiB,EAAO,WAAEC,GAAYF,EAC3E,OAAOjC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHC,EAAAA,EAAAA,KAAA,OAAAD,SACKiC,IAAWhC,EAAAA,EAAAA,KAAA,UAAQkC,QAASD,EAAWlC,SAAC,YAE7CD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,cAAa,MAAIgB,EAAQoB,aAEhCrC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBAAqB,MAAIgB,EAAQqB,eAAiB,MAAQ,QAG7DrB,EAAQqB,iBACRtC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAAe,MAAIgB,EAAQsB,8BAGtCvC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,MAAIgB,EAAQuB,YAE/BxC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,MAAI0B,OAAOC,KAAKX,EAAQY,UAAUC,KAAIC,IAC1C7B,EAAAA,EAAAA,KAACuC,EAAO,CAAWC,aAAcX,EAAKY,aAAc1B,EAAQY,SAASE,IAAvDA,UAK1B,EAOLU,EAAgCG,IAAqC,IAApC,aAAEF,EAAY,aAAEC,GAAcC,EACjE,OAAO5C,EAAAA,EAAAA,MAAA,OAAKoB,UAAWyB,EAAEhB,SAAS5B,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIyC,IAAiB,KAAGC,IACtB,EAGV,EA9EmC5B,IAAyE,IAAxE,QAAEE,EAAO,OAAEpB,EAAM,aAAEe,EAAY,QAAEsB,EAAO,UAAEY,EAAS,YAAEC,GAAahC,GAC7FrB,EAAUsD,IAAepD,EAAAA,EAAAA,WAAS,GACvC,IAAKqB,EACD,OAAOf,EAAAA,EAAAA,KAAC+C,EAAAA,EAAS,IAerB,OACIjD,EAAAA,EAAAA,MAAA,OAAKoB,UAAWyB,EAAEK,aAAajD,SAAA,EAC3BD,EAAAA,EAAAA,MAAA,OAAKoB,UAAWyB,EAAEM,IAAIlD,SAAA,EAClBC,EAAAA,EAAAA,KAAA,OAAKkD,IAAKnC,EAAQoC,OAAOC,OAASC,EAAWC,IAAI,MAChDtB,IAAWhC,EAAAA,EAAAA,KAAA,SAAOuD,GAAG,QAAQhC,KAAM,OAAQpB,SAhB/BC,IAAsC,IAADoD,EACxC,QAAlBA,EAAIpD,EAAEqD,OAAOC,aAAK,IAAAF,GAAdA,EAAgBG,QAChBf,EAAUxC,EAAEqD,OAAOC,MAAM,GAC7B,IAcSlE,GAAWQ,EAAAA,EAAAA,KAAC4D,EAAe,CAACC,cAAe9C,EAASA,QAASA,EAASE,SAZjE6C,IACdjB,EAAYiB,GAAUC,MAClB,KACIjB,GAAY,EAAM,GAEzB,KAQWhD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,KAACC,EAAAA,EAAAA,KAAC8B,EAAW,CAACf,QAASA,EAASiB,QAASA,EAASC,WAAYA,KAAQa,GAAY,EAAK,IAAM,WAE1G9C,EAAAA,EAAAA,KAAA,OAAKkB,UAAWyB,EAAEqB,iBAAiBjE,UAC/BC,EAAAA,EAAAA,KAACiE,EAAe,CAACtE,OAAQA,EAAQe,aAAcA,QAEjD,E,cC7Cd,QAAwB,uBAAxB,EAA4D,4BAA5D,EAAyG,gCAAzG,EAAwJ,8BCQlJwD,EAAuB3E,IAErBO,EAAAA,EAAAA,MAAA,OAAKoB,UAAWyB,EAAiB5C,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKkD,IAAKiB,EAAMb,IAAI,OACpBtD,EAAAA,EAAAA,KAAA,OAAKkB,UAAWyB,EAAe5C,SAC1BR,EAAM6E,WAEXpE,EAAAA,EAAAA,KAAA,OAAKkB,UAAU,YAAWnB,SACrBR,EAAM8E,eAWjBC,EAAoDC,EAAAA,MAAWhF,IACjE,IAAIiF,EAAgB,IAAIjF,EAAMkF,OAAOC,UAAU9C,KAAI+C,IAAK3E,EAAAA,EAAAA,KAACkE,EAAK,CAACE,QAASO,EAAEP,QAASC,UAAWM,EAAEN,UAAWd,GAAI,MAI/G,OACIzD,EAAAA,EAAAA,MAAA,OAAKoB,UAAWyB,EAAa5C,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAERC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAC4E,EAAmB,CAAC3D,SAThB4D,IACbtF,EAAMuF,QAAQD,EAAOE,YAAY,OAU7B/E,EAAAA,EAAAA,KAAA,OAAKkB,UAAWyB,EAAQ5C,SACnByE,MAEH,IAmBRI,GAAsBjE,EAAAA,EAAAA,GAA4C,CAAEC,KAAM,yBAApDD,EATiEpB,IAErFO,EAAAA,EAAAA,MAAA,QAAMmB,SAAU1B,EAAMuB,aAAaf,SAAA,EAC9BsB,EAAAA,EAAAA,IAAuC,YAAa,cAAe,GAAIC,EAAAA,KACxEtB,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAOpB,I,cC1DA,MAQA,GAFyBiF,EAAAA,EAAAA,KANAC,IACd,CACHR,MAAOQ,EAAMC,YAAYT,SAIwE,CAAEK,QAASK,EAAAA,GAAQC,sBAAnGJ,CAA2HV,GCSpJ,EATgC/E,IAExBO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACqF,EAAW,CAACzC,UAAWrD,EAAMqD,UAAWZ,QAASzC,EAAMyC,QAASjB,QAASxB,EAAMwB,QAASpB,OAAQJ,EAAMI,OAAQe,aAAcnB,EAAMmB,aAAcmC,YAAatD,EAAMsD,eACpK7C,EAAAA,EAAAA,KAACsF,EAAgB,O,wBCwD7B,SAAeC,E,QAAAA,KACXP,EAAAA,EAAAA,KAVJ,SAAyBC,GAAsB,IAADO,EAC1C,MAAO,CACHzE,QAASkE,EAAMC,YAAYnE,QAC3BpB,OAAQsF,EAAMC,YAAYvF,OAC1B8F,iBAA+B,QAAfD,EAAEP,EAAMS,KAAKnC,UAAE,IAAAiC,OAAA,EAAbA,EAAeG,WACjCC,OAAQX,EAAMS,KAAKE,OAE3B,GAG6B,CAAEC,eAAc,KAAEC,UAAS,KAAEpF,aAAY,KAAEkC,UAAS,KAAEC,YAAY,OAC3FkD,EAAAA,EAFJ,EAjD+CxG,IAC3C,MAAMyG,GAAWC,EAAAA,EAAAA,OACX,OAAEC,IAAWC,EAAAA,EAAAA,MA0BnB,OAzBAtG,EAAAA,EAAAA,YAAU,KAoBFqG,IAAW3G,EAAMkG,kBAnBEW,MACnB,IAAIC,EAAeH,EACC,IAADI,EAAnB,IAAKD,IACDA,EAAqC,QAAzBC,EAAG/G,EAAMkG,wBAAgB,IAAAa,OAAA,EAAtBA,EAAwBX,YAClCU,GAED,YADAL,EAAS,UAKZK,GAKL9G,EAAMsG,gBAAgBQ,GACtB9G,EAAMuG,WAAWO,IALbE,QAAQvF,MAAM,iSAKY,EAI9BoF,EACJ,GACD,CAACF,EAAQ3G,EAAMkG,iBAAkBlG,EAAMsG,eAAgBtG,EAAMuG,UAAWE,KAGvEhG,EAAAA,EAAAA,KAACwG,EAAO,IACAjH,EACJqD,UAAWrD,EAAMqD,UACjBZ,SAAUkE,EACVnF,QAASxB,EAAMwB,QACfpB,OAAQJ,EAAMI,OACde,aAAcnB,EAAMmB,cACtB,G,2ECvDV,SAAS+F,EAA2BxB,GAChC,MAAO,CACHW,OAAQX,EAAMS,KAAKE,OAE3B,CAKO,SAASG,EAAkDW,GAU9D,OAFqC1B,EAAAA,EAAAA,IAA6CyB,EAA4B,CAAC,EAA1EzB,EAPazF,IAC9C,IAAI,OAAEqG,KAAWe,GAAcpH,EAC/B,OAAKqG,GAGE5F,EAAAA,EAAAA,KAAC0G,EAAgB,IAAKC,KAHT3G,EAAAA,EAAAA,KAAC4G,EAAAA,GAAM,CAAA7G,UACvBC,EAAAA,EAAAA,KAAC6G,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAAS/G,EAAAA,EAAAA,KAACgH,EAAAA,GAAQ,CAACC,GAAG,cAEkB,GAKpE,C","sources":["webpack://first-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://first-project/./src/components/Profile/Myposts/Myposts.module.css?f0a2","components/Profile/Myposts/Myposts.tsx","components/Profile/Myposts/MypostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"ProfileInfo_ava__2kiHq\",\"profileBlock\":\"ProfileInfo_profileBlock__nMvag\",\"contacts\":\"ProfileInfo_contacts__jqWMI\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\";\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nconst StatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMede] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMede(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMede(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode} >{props.status || \"-\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusWithHooks","import React, { FC } from \"react\"\r\nimport { GetStringKeys, Input, Textarea, createField } from \"../../../FormsControl/FormsControl\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport style from \"../../../FormsControl/FormsControl.module.css\"\r\nimport { ProfileType } from \"../../../types/types\"\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {error && <div className={style.formSummeryError}>{error}</div>}\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        <div>\r\n            <b>Full Name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n        </div>\r\n        <div>\r\n            <b>Description</b>: {createField<ProfileTypeKeys>(\"Description\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}</b>: {createField(key, \"contacts\" + key, [], Input)}\r\n                </div>\r\n            })}\r\n        </div>\r\n\r\n    </form >\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { ChangeEvent, FC, useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport StatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (starus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div className={s.ava}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"!\" />\r\n                {isOwner && <input id=\"input\" type={'file'} onChange={onPhotoSelected} />}\r\n                {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> :\r\n                    <div> <ProfileData profile={profile} isOwner={isOwner} onEditMode={() => { setEditMode(true) }} /> </div>}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <StatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, onEditMode }) => {\r\n    return <div>\r\n        <div>\r\n            {isOwner && <button onClick={onEditMode}>Edit</button>}\r\n        </div>\r\n        <div>\r\n            <b>Full Name</b>:  {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:  {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                <b>Description</b>:  {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>:  {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:  {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n            })}\r\n        </div>\r\n\r\n\r\n    </div >\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contacts}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Myposts_posts__Khf9Q\",\"postsBlock\":\"Myposts_postsBlock__8xARZ\",\"likeCountBlock\":\"Myposts_likeCountBlock__xoDkI\",\"massegeBlock\":\"Myposts_massegeBlock__MX3J-\"};","import React, { FC } from \"react\";\r\nimport s from \"./Myposts.module.css\"\r\nimport icon from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\n\r\nimport { GetStringKeys, Input, createField } from \"../../../FormsControl/FormsControl\";\r\nimport { PostType } from \"../../../types/types\";\r\n\r\n\r\nconst Posts: FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.likeCountBlock}>\r\n            <img src={icon} alt=\"!\" />\r\n            <div className={s.massegeBlock}>\r\n                {props.massege}\r\n            </div>\r\n            <div className=\"likeCount\">\r\n                {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nconst Myposts: FC<MyPostsPropsType & DispatchPropsType> = React.memo(props => {\r\n    let postsElements = [...props.posts].reverse().map(p => <Posts massege={p.massege} likeCount={p.likeCount} id={0} />)\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <h3>My posts</h3>\r\n            </div>\r\n            <div>\r\n                <AddNewPostReduxForm onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\nconst AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<AddPostFormValuesKeysType>(\"Yuor post\", 'newPostText', [], Input)}\r\n            <button>Add posts</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesType, PropsType>({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nexport default Myposts","import { actions } from \"../../../redux/profileReducer\"\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\nimport Myposts, { DispatchPropsType, MyPostsPropsType } from \"./Myposts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MypostsContainer = connect<MyPostsPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, { addPost: actions.addPostActionCreator })(Myposts)\r\n\r\nexport default MypostsContainer","import React, { FC } from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MypostsContainer from \"./Myposts/MypostsContainer\";\r\nimport { ProfileType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (starus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n            <MypostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, { FC, useEffect } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfile, saveProfile, savePhoto, updateStatus, getStatus } from \"../../redux/profileReducer\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { ProfileType } from \"../../types/types\";\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void;\r\n    getStatus: (userId: number) => void;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\ntype ParamsType = {\r\n    userId: string;\r\n}\r\ntype PropsType = MapPropsType & DispatchPropsType & ParamsType;\r\n\r\nconst ProfileContainer: React.FC<PropsType> = (props) => {\r\n    const navigate = useNavigate();\r\n    const { userId } = useParams<ParamsType>();\r\n    useEffect(() => {\r\n        const refreshProfile = () => {\r\n            let parsedUserId = userId;\r\n            if (!parsedUserId) {\r\n                parsedUserId = props.authorizedUserId?.toString();\r\n                if (!parsedUserId) {\r\n                    navigate('/login');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!parsedUserId) {\r\n                console.error(\"ID должен существовать в параметрах URI или в состоянии ('authorizedUserId')\");\r\n                return;\r\n            }\r\n\r\n            props.getUserProfile(+parsedUserId);\r\n            props.getStatus(+parsedUserId);\r\n        };\r\n\r\n        if (userId !== props.authorizedUserId) {\r\n            refreshProfile();\r\n        }\r\n    }, [userId, props.authorizedUserId, props.getUserProfile, props.getStatus, navigate]);\r\n\r\n    return (\r\n        <Profile\r\n            {...props}\r\n            savePhoto={props.savePhoto}\r\n            isOwner={!userId}\r\n            profile={props.profile}\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n        />\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id?.toString(), // Convert to string if necessary\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n","import React, { FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/reduxStore\";\r\n\r\nfunction mapStateToPropsforRedirect(state: AppStateType) {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype IntrinsicAttributes = {}\r\nexport function withAuthRedirect<WCP extends IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: FC<MapPropsType & {}> = (props) => {\r\n        let { isAuth, ...restProps } = props\r\n        if (!isAuth) return <Routes>\r\n            <Route path=\"*\" element={<Navigate to=\"/login\" />} />\r\n        </Routes>\r\n        return <WrappedComponent {...restProps as unknown as WCP} />\r\n    }\r\n    let connectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsforRedirect, {})(RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent\r\n}"],"names":["props","editMode","setEditMede","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummeryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","_ref2","isOwner","onEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","s","savePhoto","saveProfile","setEditMode","Preloader","profileBlock","ava","src","photos","large","userPhoto","alt","id","_e$target$files","target","files","length","ProfileDataForm","initialValues","formData","then","descriptionBlock","StatusWithHooks","Posts","icon","massege","likeCount","Myposts","React","postsElements","posts","reverse","p","AddNewPostReduxForm","values","addPost","newPostText","connect","state","profilePage","actions","addPostActionCreator","ProfileInfo","MypostsContainer","compose","_state$auth$id","authorizedUserId","auth","toString","isAuth","getUserProfile","getStatus","withAuthRedirect","navigate","useNavigate","userId","useParams","refreshProfile","parsedUserId","_props$authorizedUser","console","Profile","mapStateToPropsforRedirect","WrappedComponent","restProps","Routes","Route","path","element","Navigate","to"],"sourceRoot":""}