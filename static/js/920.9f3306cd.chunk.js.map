{"version":3,"file":"static/js/920.9f3306cd.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","redux/profileSelector.ts","components/common/UploadButton/uploadButton.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://first-project/./src/components/Profile/Myposts/Myposts.module.css?f0a2","components/Profile/Myposts/Myposts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"ProfileInfo_ava__he39s\",\"profileBlock\":\"ProfileInfo_profileBlock__FMO5n\",\"contacts\":\"ProfileInfo_contacts__H-P--\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateStatus } from \"../../../redux/profileReducer\";\r\ntype PropsType = {\r\n    status: string\r\n}\r\nconst StatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMede] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const dispatch = useDispatch<any>()\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMede(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMede(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div style={{ color: '#DBDEE1' }}>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode} >{props.status || \"-\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusWithHooks","import React, { FC, useEffect } from \"react\"\r\nimport { GetStringKeys, Input, Textarea, createField } from \"../../../FormsControl/FormsControl\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport style from \"../../../FormsControl/FormsControl.module.css\"\r\nimport { ProfileType } from \"../../../types/types\"\r\nimport { Button } from \"antd\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}  >\r\n        {error && <div className={style.formSummeryError}>{error}</div>}\r\n        <div>\r\n            <Button onClick={handleSubmit}>Save</Button>\r\n        </div>\r\n        <div>\r\n            <b>Full Name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n        </div>\r\n        <div>\r\n            <b>Description</b>: {createField<ProfileTypeKeys>(\"Description\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}</b>: {createField(key, \"contacts\" + key, [], Input)}\r\n                </div>\r\n            })}\r\n        </div>\r\n\r\n    </form >\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({ form: 'edit-profile', enableReinitialize: true })(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataFormReduxForm","import { AppStateType } from \"./reduxStore\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const selectStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { message, Upload } from 'antd';\r\nimport type { GetProp, UploadProps } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { savePhoto } from '../../../redux/profileReducer';\r\n\r\ntype FileType = Parameters<GetProp<UploadProps, 'beforeUpload'>>[0];\r\n\r\nconst getBase64 = (img: FileType, callback: (url: string) => void) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result as string));\r\n    reader.readAsDataURL(img);\r\n};\r\n\r\n\r\n\r\nconst AvatarUploadButton: React.FC = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrl, setImageUrl] = useState<string>()\r\n    const dispatch = useDispatch<any>()\r\n    const beforeUpload = (file: FileType) => {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('You can only upload JPG/PNG file!');\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 2;\r\n        if (!isLt2M) {\r\n            message.error('Image must smaller than 2MB!');\r\n        }\r\n        if (file) {\r\n            dispatch(savePhoto(file))\r\n        }\r\n        return isJpgOrPng && isLt2M\r\n    }\r\n\r\n    const handleChange: UploadProps['onChange'] = (info) => {\r\n        if (info.file.status === 'uploading') {\r\n            setLoading(true)\r\n            return\r\n        }\r\n        if (info.file.status === 'done') {\r\n            // Get this url from response in real world.\r\n            getBase64(info.file.originFileObj as FileType, () => {\r\n                setLoading(false)\r\n            })\r\n        }\r\n    };\r\n\r\n    const uploadButton = (\r\n        <button style={{ border: 0, background: 'none', }} type=\"button\">\r\n            {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n            <div style={{ marginTop: 8 }}>Upload</div>\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Upload\r\n                name=\"avatar\"\r\n                listType=\"picture-circle\"\r\n                className=\"avatar-uploader\"\r\n                showUploadList={false}\r\n                action=\"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\"\r\n                beforeUpload={beforeUpload}\r\n                onChange={handleChange}\r\n            >\r\n                {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AvatarUploadButton;","import React, { ChangeEvent, FC, useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport StatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectProfile, selectStatus } from \"../../../redux/profileSelector\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { savePhoto, saveProfile } from \"../../../redux/profileReducer\";\r\nimport { Button } from \"antd\";\r\nimport AvatarUploadButton from \"../../common/UploadButton/uploadButton\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({ isOwner, }) => {\r\n\r\n    const profile = useSelector(selectProfile)\r\n    const status = useSelector(selectStatus)\r\n    const dispatch = useDispatch<any>()\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData)).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div className={s.ava}>\r\n                <img src={profile.photos.large || userPhoto} alt=\"!\" />\r\n                {isOwner && editMode && <AvatarUploadButton />}\r\n                {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> :\r\n                    <div> <ProfileData profile={profile} isOwner={isOwner} onEditMode={() => { setEditMode(true) }} /> </div>}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <StatusWithHooks status={status} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, onEditMode }) => {\r\n    return <div>\r\n        <div>\r\n            {isOwner && <Button onClick={onEditMode}>Edit</Button>}\r\n        </div>\r\n        <div>\r\n            <b>Full Name</b>:  {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:  {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                <b>Description</b>:  {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>:  {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>:  {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n            })}\r\n        </div>\r\n\r\n\r\n    </div >\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contacts}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Myposts_posts__fAIRV\",\"postsBlock\":\"Myposts_postsBlock__FqVGo\",\"likeCountBlock\":\"Myposts_likeCountBlock__he3TU\",\"massegeBlock\":\"Myposts_massegeBlock__kgmlz\"};","import React, { FC } from \"react\";\r\nimport s from \"./Myposts.module.css\"\r\nimport icon from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\n\r\nimport { GetStringKeys, Input, createField } from \"../../../FormsControl/FormsControl\";\r\nimport { PostType } from \"../../../types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actions } from \"../../../redux/profileReducer\";\r\nimport { Button } from \"antd\";\r\n\r\n\r\nconst Posts: FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.likeCountBlock}>\r\n            <img src={icon} alt=\"!\" />\r\n            <div className={s.massegeBlock}>\r\n                {props.massege}\r\n            </div>\r\n            <div className=\"likeCount\">\r\n                {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nconst Myposts: FC = React.memo(() => {\r\n    const posts = useSelector((state: AppStateType) => state.profilePage.posts)\r\n    const dispatch = useDispatch<any>()\r\n    let postsElements = [...posts].reverse().map(p => <Posts massege={p.massege} likeCount={p.likeCount} id={0} />)\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText))\r\n    }\r\n    return (\r\n        <div  >\r\n            <h3 style={{ textAlign: 'center' }}>My posts</h3>\r\n            <div style={{ display: \"flex\", }}>\r\n                <div>\r\n                </div>\r\n                <div>\r\n                    <AddNewPostReduxForm onSubmit={onAddPost} />\r\n                </div>\r\n            </div>\r\n            <div className={s.posts} style={{ height: '300px', overflowY: 'auto' }}>\r\n                {postsElements}\r\n            </div>\r\n        </div >\r\n    )\r\n})\r\ntype PropsType = {\r\n\r\n}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\nconst AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form >\r\n            <div style={{ display: 'flex' }}>\r\n                {createField<AddPostFormValuesKeysType>(\"Yuor post\", 'newPostText', [], Input)}\r\n                <Button onClick={props.handleSubmit}>Add posts</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesType, PropsType>({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm)\r\n\r\nexport default Myposts","import React, { FC } from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport Myposts from \"./Myposts/Myposts\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} />\r\n            <Myposts />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, { useEffect } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { getUserProfile, getStatus } from \"../../redux/profileReducer\";\r\nimport { Navigate, Route, Routes, useNavigate, useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAuthorizedUserId, selectIsAuth } from \"../../redux/authSelectors\";\r\n\r\n\r\n\r\ntype ParamsType = {\r\n    userId: string;\r\n}\r\n\r\nexport const ProfileContainer: React.FC = () => {\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId)\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<any>()\r\n    const { userId } = useParams<ParamsType>();\r\n    useEffect(() => {\r\n        const refreshProfile = () => {\r\n            let parsedUserId = userId;\r\n            if (!parsedUserId) {\r\n                parsedUserId = authorizedUserId?.toString();\r\n            }\r\n            if (!parsedUserId) {\r\n                console.error(\"ID должен существовать в параметрах URI или в состоянии ('authorizedUserId')\");\r\n                return;\r\n            }\r\n\r\n            dispatch(getUserProfile(+parsedUserId))\r\n            dispatch(getStatus(+parsedUserId))\r\n        }\r\n        if (userId !== authorizedUserId) {\r\n            refreshProfile();\r\n        }\r\n    }, [userId, authorizedUserId, getUserProfile, getStatus]);\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate('/login');\r\n        }\r\n    }, [isAuth, navigate])\r\n    return (\r\n        <Profile\r\n            isOwner={!userId}\r\n        />\r\n    )\r\n}\r\n\r\n"],"names":["props","editMode","setEditMede","useState","status","setStatus","dispatch","useDispatch","useEffect","_jsxs","style","color","children","_jsx","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","reduxForm","form","enableReinitialize","_ref","handleSubmit","profile","error","onSubmit","className","formSummeryError","Button","onClick","createField","Input","type","Textarea","Object","keys","contacts","map","key","selectProfile","state","profilePage","selectStatus","AvatarUploadButton","loading","setLoading","imageUrl","setImageUrl","uploadButton","border","background","LoadingOutlined","PlusOutlined","marginTop","_Fragment","Upload","name","listType","showUploadList","action","beforeUpload","file","isJpgOrPng","message","isLt2M","size","savePhoto","info","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","originFileObj","src","alt","width","ProfileData","_ref2","isOwner","onEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","s","useSelector","setEditMode","Preloader","profileBlock","ava","photos","large","userPhoto","ProfileDataForm","initialValues","formData","saveProfile","then","descriptionBlock","StatusWithHooks","Posts","icon","massege","likeCount","Myposts","React","posts","postsElements","reverse","p","id","textAlign","display","AddNewPostReduxForm","values","actions","addPostActionCreator","newPostText","height","overflowY","ProfileInfo","ProfileContainer","authorizedUserId","selectAuthorizedUserId","isAuth","selectIsAuth","navigate","useNavigate","userId","useParams","refreshProfile","parsedUserId","toString","getUserProfile","getStatus","console","Profile"],"sourceRoot":""}