{"version":3,"file":"static/js/160.338cc4e2.chunk.js","mappings":"uSAiBO,MAAMA,EAAqBA,KAE1BC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACE,EAAI,MAKJA,EAAiBA,KAC1B,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SACzDI,GAASH,EAAAA,EAAAA,IAAYI,EAAAA,IACrBC,GAAWC,EAAAA,EAAAA,MAajB,OAZAC,EAAAA,EAAAA,YAAU,KACDJ,GACDE,EAAS,SACb,GACD,CAACF,EAAQE,KAEZE,EAAAA,EAAAA,YAAU,KACNV,GAASW,EAAAA,EAAAA,OACF,KACHX,GAASY,EAAAA,EAAAA,MAAc,IAE5B,CAACZ,KAEAa,EAAAA,EAAAA,MAAA,OAAAf,SAAA,CACgB,UAAXI,IAAsBL,EAAAA,EAAAA,KAAA,OAAAC,SAAK,kDAC5BD,EAAAA,EAAAA,KAACiB,EAAQ,KACTjB,EAAAA,EAAAA,KAACkB,EAAc,MACZ,EAKFD,EAAqBA,KAC9B,MAAME,GAAWb,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKW,WAC3DC,GAAoBC,EAAAA,EAAAA,QAAuB,OAC1CC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAgBjD,OALAX,EAAAA,EAAAA,YAAU,KACa,IAADY,EAAdH,IACyB,QAAzBG,EAAAL,EAAkBM,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAAEC,SAAU,SAAUC,OAAQ,QAC5E,GACD,CAACP,KAEAN,EAAAA,EAAAA,MAAA,OAAKc,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAfjCC,IACnB,IAAIC,EAAUD,EAAEE,cACZC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,cAC5DnB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EACpC,EAS4EtB,SAAA,CACvEkB,EAASuB,KAAKC,IAA0B3C,EAAAA,EAAAA,KAAC4C,EAAO,CAAgBC,QAASF,GAAnBA,EAAEG,WAEzD9C,EAAAA,EAAAA,KAAA,OAAK+C,IAAK3B,MACR,EAGDwB,EAAqDI,EAAAA,MAAWC,IAAkB,IAAjB,QAAEJ,GAASI,EACrF,OACIjC,EAAAA,EAAAA,MAAA,OAAAf,SAAA,EACID,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CAACC,MAAMnD,EAAAA,EAAAA,KAACoD,EAAAA,EAAY,IAAKC,IAAKR,EAAQS,MAAOxB,MAAO,CAAEyB,MAAO,WACpEvD,EAAAA,EAAAA,KAAA,KAAAC,SAAI4C,EAAQW,YACZxD,EAAAA,EAAAA,KAAA,KAAAC,SAAI4C,EAAQA,WACZ7C,EAAAA,EAAAA,KAAA,WACE,IAIDkB,EAA2BA,KACpC,MAAO2B,EAASY,IAAcjC,EAAAA,EAAAA,UAAS,IACjCrB,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SAW/D,OACIW,EAAAA,EAAAA,MAAA,OAAAf,SAAA,EACID,EAAAA,EAAAA,KAAA,YAAU0D,SAAWxB,GAAMuB,EAAWvB,EAAEE,cAAcuB,OAAQA,MAAOd,KACrE7C,EAAAA,EAAAA,KAAC4D,EAAAA,GAAM,CAACC,SAAqB,UAAXxD,EAAoByD,QAVnBC,KAClBlB,IAGL1C,GAAS6D,EAAAA,EAAAA,IAAYnB,IACrBY,EAAW,IAAG,EAKwDxD,SAAE,WAClE,C","sources":["pages/chat/chat.tsx"],"sourcesContent":["import { Avatar, Button } from \"antd\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { sendMessage, startChating, stopChating, } from \"../../redux/chatReducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { selectIsAuth } from \"../../redux/authSelectors\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\nexport const ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Chat: React.FC = () => {\r\n    const dispatch = useDispatch<any>()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate('/login');\r\n        }\r\n    }, [isAuth, navigate])\r\n\r\n    useEffect(() => {\r\n        dispatch(startChating())\r\n        return () => {\r\n            dispatch(stopChating())\r\n        }\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div> Some error occured. Please refresh the page</div>}\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport const Messages: React.FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth', inline: 'end' })\r\n        }\r\n    }, [isAutoScroll])\r\n    return (\r\n        <div style={{ height: '600px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messages.map((m: ChatMessageAPIType) => <Message key={m.userId} message={m} />\r\n            )}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\nexport const Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n    return (\r\n        <div >\r\n            <Avatar icon={<UserOutlined />} src={message.photo} style={{ width: '30px' }} />\r\n            <b>{message.userName}</b>\r\n            <p>{message.message}</p>\r\n            <hr />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const AddMessageForm: React.FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch<any>()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            <Button disabled={status !== 'ready'} onClick={sendMessageHandler} >Send</Button>\r\n        </div>\r\n    )\r\n}"],"names":["ChatPage","_jsx","children","Chat","dispatch","useDispatch","status","useSelector","state","chat","isAuth","selectIsAuth","navigate","useNavigate","useEffect","startChating","stopChating","_jsxs","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","inline","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","userId","ref","React","_ref","Avatar","icon","UserOutlined","src","photo","width","userName","setMessage","onChange","value","Button","disabled","onClick","sendMessageHandler","sendMessage"],"sourceRoot":""}