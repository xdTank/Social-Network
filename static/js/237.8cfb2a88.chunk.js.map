{"version":3,"file":"static/js/237.8cfb2a88.chunk.js","mappings":"iKACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAA0I,wBAA1I,EAA6K,0BAA7K,EAA+M,uB,iCCI/M,MAUA,EAVsBA,IAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAQC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAMC,IAAI,MACpBH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIX,EAAKK,SAAEN,EAAMa,SACxB,ECMd,EAZkBb,IAEVG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAASC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAMC,IAAI,MACpBH,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,SAAEN,EAAMc,c,2CCC/C,MAwCMC,GAAsBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,wBAAlBD,EAbJhB,IAEhBG,EAAAA,EAAAA,MAAA,QAAMe,SAAUlB,EAAMmB,aAAab,SAAA,EAE/BC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,MAAOZ,KAAK,iBAAiBa,YAAY,0BAE/GnB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,gBAOxB,EA1CiBN,IAEb,IAAI2B,EAAQ3B,EAAM4B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAIC,IAAKzB,EAAAA,EAAAA,KAAC0B,EAAY,CAACpB,KAAMmB,EAAEnB,KAAiBX,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,MAC5EgC,EAAmBP,EAAMb,SAASiB,KAAII,IAAK5B,EAAAA,EAAAA,KAAC6B,EAAQ,CAACtB,SAAUqB,EAAErB,SAAqBZ,GAAIiC,EAAEjC,IAAZiC,EAAEjC,MAOtF,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAeC,SAC1BuB,KAELtB,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,UACvBC,EAAAA,EAAAA,KAAA,OAAAD,SAAM4B,OAEV3B,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACQ,EAAmB,CAACG,SAdZmB,IACjBrC,EAAMsC,mBAAmBD,EAAOE,eAAe,QAezC,E,kCCbd,SAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdmBd,IACZ,CACHC,YAAaD,EAAMC,gBAGDc,IACf,CACHJ,mBAAqBC,IACjBG,GAASJ,EAAAA,EAAAA,GAAmBC,GAAgB,MAOpDI,EAAAA,EAFJ,CAGEC,E,6ECnBF,SAASC,EAA2BlB,GAChC,MAAO,CACHmB,OAAQnB,EAAMoB,KAAKD,OAE3B,CACO,MAAMH,EAAoBK,IAC7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAKC,KAAKpD,MAAM8C,QAGTvC,EAAAA,EAAAA,KAACyC,EAAS,IAAKI,KAAKpD,SAHIO,EAAAA,EAAAA,KAAC8C,EAAAA,GAAM,CAAA/C,UAClCC,EAAAA,EAAAA,KAAC+C,EAAAA,GAAK,CAACrD,KAAK,IAAIsD,SAAShD,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAAC5C,GAAG,cAG9C,EAIJ,OAFqC6B,EAAAA,EAAAA,IAAQI,EAARJ,CAAoCQ,EAEpC,C","sources":["webpack://first-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItems/DialogItems.jsx","components/Dialogs/DialogsItems/Messeges/Messeges.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZyLQd\",\"dialogsItems\":\"Dialogs_dialogsItems__QkU4L\",\"active\":\"Dialogs_active__EbVUZ\",\"dialog\":\"Dialogs_dialog__YtWJA\",\"masseges\":\"Dialogs_masseges__DUhjn\",\"names\":\"Dialogs_names__b7xg+\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport icon from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\n\r\nconst DialogsItems = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.names}>\r\n            <img src={icon} alt=\"\" />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItems","import React from \"react\";\r\nimport icon from \"../../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport s from \"../../Dialogs.module.css\"\r\n\r\n\r\nconst Masseges = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={icon} alt=\"\" />\r\n            <div className={s.masseges}>{props.messages}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Masseges","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogsItems from \"./DialogsItems/DialogItems\"\r\nimport Masseges from \"./DialogsItems/Messeges/Messeges\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../../FormsControl/FormsControl\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItems name={d.name} key={d.id} id={d.id} />)\r\n    let massagesElements = state.messages.map(m => <Masseges messages={m.messages} key={m.id} id={m.id} />)\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessageCreator(values.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.masseges}>\r\n                <div>{massagesElements}</div>\r\n            </div>\r\n            <div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLengthCreator(100)]} name=\"newMessageBody\" placeholder=\"Enter your message\" />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\nexport default Dialogs","import { sendMessageCreator } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessageCreator: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\n\r\nfunction mapStateToPropsforRedirect(state) {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Routes>\r\n                <Route path=\"*\" element={<Navigate to=\"/login\" />} />\r\n            </Routes>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsforRedirect)(RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent\r\n}"],"names":["props","path","id","_jsxs","className","s","children","_jsx","src","icon","alt","NavLink","to","name","messages","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","maxLengthCreator","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","DialogsItems","massagesElements","m","Masseges","values","sendMessageCreator","newMessageBody","compose","connect","dispatch","withAuthRedirect","Dialogs","mapStateToPropsforRedirect","isAuth","auth","Component","RedirectComponent","React","render","this","Routes","Route","element","Navigate"],"sourceRoot":""}