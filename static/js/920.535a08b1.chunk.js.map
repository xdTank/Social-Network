{"version":3,"file":"static/js/920.535a08b1.chunk.js","mappings":"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","sources":["webpack://first-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/common/UploadButton/uploadButton.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","redux/profileSelector.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://first-project/./src/components/Profile/Myposts/Myposts.module.css?f0a2","components/Profile/Myposts/Myposts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"ProfileInfo_ava__he39s\",\"profileBlock\":\"ProfileInfo_profileBlock__FMO5n\",\"contacts\":\"ProfileInfo_contacts__H-P--\"};","import React, { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateStatus } from \"../../../redux/profileReducer\";\r\ntype PropsType = {\r\n    status: string\r\n}\r\nconst StatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMede] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const dispatch = useDispatch<any>()\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMede(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMede(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div style={{ color: '#DBDEE1' }}>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode} >{props.status || \"-\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusWithHooks","import React, { useState } from 'react';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { message, Upload } from 'antd';\r\nimport type { GetProp, UploadProps } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { savePhoto } from '../../../redux/profileReducer';\r\n\r\ntype FileType = Parameters<GetProp<UploadProps, 'beforeUpload'>>[0];\r\n\r\nconst getBase64 = (img: FileType, callback: (url: string) => void) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result as string));\r\n    reader.readAsDataURL(img);\r\n};\r\n\r\n\r\n\r\nconst AvatarUploadButton: React.FC = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageUrl, setImageUrl] = useState<string>()\r\n    const dispatch = useDispatch<any>()\r\n    const beforeUpload = (file: FileType) => {\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n        if (!isJpgOrPng) {\r\n            message.error('You can only upload JPG/PNG file!');\r\n        }\r\n        const isLt2M = file.size / 1024 / 1024 < 2;\r\n        if (!isLt2M) {\r\n            message.error('Image must smaller than 2MB!');\r\n        }\r\n        if (file) {\r\n            dispatch(savePhoto(file))\r\n        }\r\n        return isJpgOrPng && isLt2M\r\n    }\r\n\r\n    const handleChange: UploadProps['onChange'] = (info) => {\r\n        if (info.file.status === 'uploading') {\r\n            setLoading(true)\r\n            return\r\n        }\r\n        if (info.file.status === 'done') {\r\n            // Get this url from response in real world.\r\n            getBase64(info.file.originFileObj as FileType, () => {\r\n                setLoading(false)\r\n            })\r\n        }\r\n    };\r\n\r\n    const uploadButton = (\r\n        <button style={{ border: 0, background: 'none', }} type=\"button\">\r\n            {loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n            <div style={{ marginTop: 8 }}>Upload</div>\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Upload\r\n                name=\"avatar\"\r\n                listType=\"picture-circle\"\r\n                className=\"avatar-uploader\"\r\n                showUploadList={false}\r\n                action=\"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\"\r\n                beforeUpload={beforeUpload}\r\n                onChange={handleChange}\r\n            >\r\n                {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n            </Upload>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AvatarUploadButton;","import React, { Dispatch, FC, SetStateAction } from 'react';\r\nimport { Button, Checkbox, Form, Input } from 'antd';\r\nimport { ProfileType } from '../../../types/types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveProfile } from '../../../redux/profileReducer';\r\nimport AvatarUploadButton from '../../common/UploadButton/uploadButton';\r\nimport userPhoto from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\n\r\ntype PropsType = {\r\n    setEditMode: Dispatch<SetStateAction<boolean>>\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst ProfileDataForm: FC<PropsType> = ({ profile, setEditMode, isOwner }) => {\r\n\r\n    const dispatch = useDispatch<any>()\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData)).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            name=\"profile_form\"\r\n            initialValues={{\r\n                fullName: profile.fullName,\r\n                aboutMe: profile.aboutMe,\r\n                lookingForAJob: profile.lookingForAJob,\r\n                lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                contacts: profile.contacts,\r\n                photos: profile.photos,\r\n                userId: profile.userId\r\n            }}\r\n            onFinish={onSubmit}\r\n            layout=\"vertical\"\r\n        >\r\n            <Form.Item>\r\n                <div style={{ display: 'flex', alignItems: 'center', gap: '20px', maxWidth: '400px' }}>\r\n                    <div>\r\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\r\n                            <img src={profile.photos.large || userPhoto} alt=\"!\" style={{ width: '120px', height: '120px' }} />\r\n                            {isOwner && <AvatarUploadButton />}\r\n                        </div>\r\n                        <b>Full Name</b>: <Form.Item name=\"fullName\" noStyle><Input placeholder=\"Full name\" /></Form.Item>\r\n                        <b>Looking for a job</b>: <Form.Item name=\"lookingForAJob\" valuePropName=\"checked\" noStyle><Checkbox /></Form.Item>\r\n                        <div>\r\n                            <b>Description</b>: <Form.Item name=\"lookingForAJobDescription\"><TextArea rows={4} /></Form.Item>\r\n                        </div>\r\n                        <b>About me</b>: <Form.Item name=\"aboutMe\" noStyle><TextArea rows={4} placeholder=\"About me\" /></Form.Item>\r\n                        <b>Contacts</b>:\r\n                        {Object.keys(profile.contacts).map((key) => (\r\n                            <Form.Item key={key} name={['contacts', key]} noStyle>\r\n                                <Input placeholder={key} />\r\n                            </Form.Item>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button  htmlType=\"submit\" style={{ backgroundColor: '#fff' }}>\r\n                    Save\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ProfileDataForm;","import { AppStateType } from \"./reduxStore\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const selectStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\n\r\n","import React, { FC, useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport StatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport { ContactsType, ProfileType } from \"../../../types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectProfile, selectStatus } from \"../../../redux/profileSelector\";\r\nimport { Button } from \"antd\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({ isOwner, }) => {\r\n\r\n    const profile = useSelector(selectProfile)\r\n    const status = useSelector(selectStatus)\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileBlock}>\r\n\r\n            <div className={s.ava} style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', gap: '50px' }}>\r\n                <div>\r\n                    {!editMode && <img src={profile.photos.large || userPhoto} alt=\"!\" />}\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        {!editMode && <StatusWithHooks status={status} />}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {editMode ? <ProfileDataForm setEditMode={setEditMode} profile={profile} isOwner={isOwner} /> :\r\n                        <div> <ProfileData profile={profile} isOwner={isOwner} onEditMode={() => { setEditMode(true) }} /> </div>}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner, onEditMode }) => {\r\n    return <div style={{ color: '#DBDEE1' }}>\r\n\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\r\n            {profile.fullName}\r\n        </div>\r\n        <div style={{}}>\r\n            <b>Looking for a job</b>:  {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            {profile.aboutMe}\r\n        </div>\r\n        {\r\n            Object.keys(profile.contacts).length > 0 && (\r\n                <div>\r\n                    <b>Contacts</b>:  {Object.keys(profile.contacts).map(key => {\r\n                        let contactValue = profile.contacts[key as keyof ContactsType]\r\n                        if (contactValue) {\r\n                            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                        }\r\n                        return null\r\n                    })}\r\n                </div>\r\n            )}\r\n        <div style={{ margin: '20px' }}>\r\n            {isOwner && <Button onClick={onEditMode} style={{ width: '100px', backgroundColor: '#fff', }} size=\"small\" >Edit profile</Button>}\r\n        </div>\r\n    </div >\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: FC<ContactPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contacts}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Myposts_posts__fAIRV\",\"postsBlock\":\"Myposts_postsBlock__FqVGo\",\"likeCountBlock\":\"Myposts_likeCountBlock__he3TU\",\"massegeBlock\":\"Myposts_massegeBlock__kgmlz\"};","import React, { FC, useState } from \"react\";\r\nimport s from \"./Myposts.module.css\"\r\nimport icon from \"../../../assets/img/44884218_345707102882519_2446069589734326272_n.jpg\"\r\nimport { PostType } from \"../../../types/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { actions } from \"../../../redux/profileReducer\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { LikeOutlined } from \"@ant-design/icons\";\r\nimport { selectProfile } from \"../../../redux/profileSelector\";\r\n\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n\r\n}\r\nconst Myposts: FC = React.memo(() => {\r\n    const posts = useSelector((state: AppStateType) => state.profilePage.posts)\r\n    let postsElements = [...posts].reverse().map(p => <Posts massege={p.massege} likeCount={p.likeCount} id={0} />)\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ display: \"flex\", borderTop: '1px solid grey', }}>\r\n                <div style={{ paddingTop: '20px', marginLeft: '50px' }}>\r\n                    <AddNewPostForm />\r\n                </div>\r\n            </div>\r\n            <div className={s.posts} style={{ height: '55vh', overflowY: 'auto' }}>\r\n                {postsElements}\r\n            </div>\r\n        </div >\r\n    )\r\n})\r\n\r\nconst Posts: FC<PostType> = (props) => {\r\n    const profile = useSelector(selectProfile)\r\n    return (\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px', margin: '25px' }}>\r\n            <img src={profile?.photos.large || icon} alt=\"!\" style={{ width: '50px', borderRadius: '50%' }} />\r\n            <div style={{ height: '40px', textAlign: 'center', alignItems: 'center', display: 'flex', padding: '5px', color: '#fff' }}>\r\n                {props.massege}\r\n            </div>\r\n            <div style={{ color: '#fff', }}>\r\n                <LikeOutlined />\r\n                {props.likeCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddNewPostForm = () => {\r\n    const dispatch = useDispatch<any>()\r\n    const [form] = Form.useForm()\r\n\r\n    const onFinish = (values: any) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText))\r\n        form.resetFields()\r\n    }\r\n    return (\r\n        <Form\r\n            form={form}\r\n            name=\"myPost_form\"\r\n            onFinish={onFinish}\r\n            autoComplete=\"off\"\r\n        >\r\n            <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\r\n                <Form.Item name=\"newPostText\">\r\n                    <Input placeholder=\"Yuor post\" size=\"small\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button style={{ backgroundColor: '#fff' }} size=\"small\" htmlType=\"submit\" >Add posts</Button>\r\n                </Form.Item>\r\n            </div>\r\n        </Form >\r\n    )\r\n}\r\n\r\n\r\nexport default Myposts","import React, { FC } from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport Myposts from \"./Myposts/Myposts\";\r\nimport { MemoryRouterProps, NavigateOptions, Navigator, Router, To } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} />\r\n            <Myposts />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, { useEffect } from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { getUserProfile, getStatus } from \"../../redux/profileReducer\";\r\nimport { Navigate, Route, Routes, useNavigate, useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAuthorizedUserId, selectIsAuth } from \"../../redux/authSelectors\";\r\n\r\n\r\n\r\ntype ParamsType = {\r\n    userId: string;\r\n}\r\n\r\nexport const ProfileContainer: React.FC = () => {\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId)\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<any>()\r\n    const { userId } = useParams<ParamsType>();\r\n    useEffect(() => {\r\n        const refreshProfile = () => {\r\n            let parsedUserId = userId;\r\n            if (!parsedUserId) {\r\n                parsedUserId = authorizedUserId?.toString();\r\n            }\r\n            if (!parsedUserId) {\r\n                console.error(\"ID должен существовать в параметрах URI или в состоянии ('authorizedUserId')\");\r\n                return;\r\n            }\r\n\r\n            dispatch(getUserProfile(+parsedUserId))\r\n            dispatch(getStatus(+parsedUserId))\r\n        }\r\n        if (userId !== authorizedUserId) {\r\n            refreshProfile();\r\n        }\r\n    }, [userId, authorizedUserId, getUserProfile, getStatus]);\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate('/login');\r\n        }\r\n    }, [isAuth, navigate])\r\n    return (\r\n        <Profile\r\n            isOwner={!userId}\r\n        />\r\n    )\r\n}\r\n\r\n"],"names":["props","editMode","setEditMede","useState","status","setStatus","dispatch","useDispatch","useEffect","_jsxs","style","color","children","_jsx","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","AvatarUploadButton","loading","setLoading","imageUrl","setImageUrl","uploadButton","border","background","type","LoadingOutlined","PlusOutlined","marginTop","_Fragment","Upload","name","listType","className","showUploadList","action","beforeUpload","file","isJpgOrPng","message","error","isLt2M","size","savePhoto","info","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","originFileObj","src","alt","width","TextArea","Input","_ref","profile","setEditMode","isOwner","Form","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","photos","userId","onFinish","formData","saveProfile","then","layout","Item","display","alignItems","gap","maxWidth","large","userPhoto","height","noStyle","placeholder","valuePropName","Checkbox","rows","Object","keys","map","key","Button","htmlType","backgroundColor","selectProfile","state","profilePage","selectStatus","ProfileData","_ref2","onEditMode","length","Contact","contactTitle","contactValue","margin","onClick","_ref3","s","useSelector","justifyContent","textAlign","StatusWithHooks","ProfileDataForm","Preloader","Myposts","React","postsElements","posts","reverse","p","Posts","massege","likeCount","id","borderTop","paddingTop","marginLeft","AddNewPostForm","overflowY","icon","borderRadius","padding","LikeOutlined","form","useForm","values","actions","addPostActionCreator","newPostText","resetFields","autoComplete","allowClear","ProfileInfo","ProfileContainer","authorizedUserId","selectAuthorizedUserId","isAuth","selectIsAuth","navigate","useNavigate","useParams","refreshProfile","parsedUserId","toString","getUserProfile","getStatus","console","Profile"],"sourceRoot":""}